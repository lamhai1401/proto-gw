// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: security/salt_hash/datastore/v1/salt_hash.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaltHashClient is the client API for SaltHash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaltHashClient interface {
	AddCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	DeleteCredentials(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type saltHashClient struct {
	cc grpc.ClientConnInterface
}

func NewSaltHashClient(cc grpc.ClientConnInterface) SaltHashClient {
	return &saltHashClient{cc}
}

func (c *saltHashClient) AddCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/datastore_v1.SaltHash/addCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saltHashClient) DeleteCredentials(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/datastore_v1.SaltHash/deleteCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaltHashServer is the server API for SaltHash service.
// All implementations must embed UnimplementedSaltHashServer
// for forward compatibility
type SaltHashServer interface {
	AddCredentials(context.Context, *Credentials) (*wrapperspb.StringValue, error)
	DeleteCredentials(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedSaltHashServer()
}

// UnimplementedSaltHashServer must be embedded to have forward compatible implementations.
type UnimplementedSaltHashServer struct {
}

func (UnimplementedSaltHashServer) AddCredentials(context.Context, *Credentials) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredentials not implemented")
}
func (UnimplementedSaltHashServer) DeleteCredentials(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredentials not implemented")
}
func (UnimplementedSaltHashServer) mustEmbedUnimplementedSaltHashServer() {}

// UnsafeSaltHashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaltHashServer will
// result in compilation errors.
type UnsafeSaltHashServer interface {
	mustEmbedUnimplementedSaltHashServer()
}

func RegisterSaltHashServer(s grpc.ServiceRegistrar, srv SaltHashServer) {
	s.RegisterService(&SaltHash_ServiceDesc, srv)
}

func _SaltHash_AddCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaltHashServer).AddCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore_v1.SaltHash/addCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaltHashServer).AddCredentials(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaltHash_DeleteCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaltHashServer).DeleteCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore_v1.SaltHash/deleteCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaltHashServer).DeleteCredentials(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// SaltHash_ServiceDesc is the grpc.ServiceDesc for SaltHash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaltHash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datastore_v1.SaltHash",
	HandlerType: (*SaltHashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCredentials",
			Handler:    _SaltHash_AddCredentials_Handler,
		},
		{
			MethodName: "deleteCredentials",
			Handler:    _SaltHash_DeleteCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security/salt_hash/datastore/v1/salt_hash.proto",
}
